from Crypto.Util.number import long_to_bytes as l2b
p = 62146958366026142673099181212004854928889458621353956380092578589084587352132050600698322176547209


x1,y1=(30779678358545190464054488513057708332020554437538179828946732915211560427490845376418082927243013 , 14337049025908639619746478656374815592411550665695554327935944374039544695245058124036987993585799 )

x2,y2=(38886361482869005117287607792428930853805083904460072910113145656459082732569562694139171365042072 , 51558507349137883147321891965487026648232854867265808781766663125620158671007497326653466994401234 )


a=((y1**2-y2**2) - (x1**3-x2**3))*pow(x1-x2,-1,p)%p


b=(y1**2-x1**3-a*x1 )%p

print(a,b)
ordd=62146958366026142673099181212004854928889458621351433594244709969547743803416744797667323204465061
E = EllipticCurve(GF(p), [a, b])
result=76265702241678458327876347722418132023514871813948025328320
enc=E(x2,y2)

#G=E.gen(0)[0]
G=E(12941188091079133293420798926863808709935614646827505023565236685277354158136345650130420238270664 ,34356083472979662547428487200756089615312904133201314736152132832564696714960780146095933041910387)
#ordd=E.order()
ordd=62146958366026142673099181212004854928889458621351433594244709969547743803416744797667323204465061
Q=E(x1,y1)
#factors, exponents = zip(*factor(ordd))
#primes_all = [factors[i] ^ exponents[i] for i in range(len(factors))]
#primes = primes_all[:-1]
primes=[678248957663, 556163531687, 786510851681, 800156883013, 1098806038621]
print(primes)
dlogs = []
for fac in primes:
    print("t")
    t = int(ordd) // int(fac)
    print("dlog")
    QQ=t*Q
    GG=t*G
    dlog = QQ.log(GG)
    dlogs += [dlog]
    print("factor: "+str(fac)+", Discrete Log: "+str(dlog)) #calculates discrete logarithm for each prime order

result = crt(dlogs,primes)
print(G==Q*result)
print(Q==G*result)
enc=E(x2,y2)
print(l2b(int((enc*result)[0])))
print(l2b(int((enc*pow(result,-1,ordd))[0])))


print(result)

